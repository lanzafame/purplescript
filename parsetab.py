
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'I\x1c\xc3-z\xb6\xf9$_\x7f\x93?\xa3\xe0.M'
    
_lr_action_items = {'VARIABLE':([5,],[7,]),'ENDCLASS':([7,],[8,]),'CLASS':([0,1,3,4,6,8,],[-6,5,-3,-4,-2,-5,]),'$end':([0,1,2,3,4,6,8,],[-6,-1,0,-3,-4,-2,-5,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'top_statement_list':([0,],[1,]),'start':([0,],[2,]),'top_statement':([1,],[6,]),'class_declaration_statement':([1,],[4,]),'empty':([0,],[3,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> top_statement_list','start',1,'p_start','_parser.py',22),
  ('top_statement_list -> top_statement_list top_statement','top_statement_list',2,'p_top_statement_list','_parser.py',26),
  ('top_statement_list -> empty','top_statement_list',1,'p_top_statement_list','_parser.py',27),
  ('top_statement -> class_declaration_statement','top_statement',1,'p_top_statement','_parser.py',35),
  ('class_declaration_statement -> CLASS VARIABLE ENDCLASS','class_declaration_statement',3,'p_class_declaration_statement','_parser.py',43),
  ('empty -> <empty>','empty',0,'p_empty','_parser.py',47),
]
